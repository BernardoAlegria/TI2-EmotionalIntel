// <auto-generated />
using System;
using EmotionalIntel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmotionalIntel.Migrations
{
    [DbContext(typeof(EmotionalDB))]
    partial class EmotionalDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmotionalIntel.Models.Perguntas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TesteFK")
                        .HasColumnType("int");

                    b.Property<string>("TxtPergunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TesteFK");

                    b.ToTable("Perguntas");
                });

            modelBuilder.Entity("EmotionalIntel.Models.Respostas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerguntaFK")
                        .HasColumnType("int");

                    b.Property<string>("TxtRespostas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PerguntaFK");

                    b.ToTable("Respostas");
                });

            modelBuilder.Entity("EmotionalIntel.Models.Tecnicas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TesteFK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TesteFK");

                    b.ToTable("Tecnicas");
                });

            modelBuilder.Entity("EmotionalIntel.Models.Testes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NRespostas")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PontuacaoAlta")
                        .HasColumnType("int");

                    b.Property<int>("PontuacaoMedia")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadorFK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UtilizadorFK");

                    b.ToTable("Testes");
                });

            modelBuilder.Entity("EmotionalIntel.Models.TestesRealizados", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pontuacao")
                        .HasColumnType("int");

                    b.Property<int?>("TesteFK")
                        .HasColumnType("int");

                    b.Property<int?>("UtilizadorFK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TesteFK");

                    b.HasIndex("UtilizadorFK");

                    b.ToTable("Testes_Realizados");
                });

            modelBuilder.Entity("EmotionalIntel.Models.Utilizadores", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("EmotionalIntel.Models.Perguntas", b =>
                {
                    b.HasOne("EmotionalIntel.Models.Testes", "Testes")
                        .WithMany("ListaPerguntas")
                        .HasForeignKey("TesteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmotionalIntel.Models.Respostas", b =>
                {
                    b.HasOne("EmotionalIntel.Models.Perguntas", "Perguntas")
                        .WithMany("ListaRespostas")
                        .HasForeignKey("PerguntaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmotionalIntel.Models.Tecnicas", b =>
                {
                    b.HasOne("EmotionalIntel.Models.Testes", "Teste")
                        .WithMany("ListaTecnicas")
                        .HasForeignKey("TesteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmotionalIntel.Models.Testes", b =>
                {
                    b.HasOne("EmotionalIntel.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaTestesCriados")
                        .HasForeignKey("UtilizadorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmotionalIntel.Models.TestesRealizados", b =>
                {
                    b.HasOne("EmotionalIntel.Models.Testes", "Teste")
                        .WithMany("ListaTestesRealizados")
                        .HasForeignKey("TesteFK");

                    b.HasOne("EmotionalIntel.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaTestesRealizados")
                        .HasForeignKey("UtilizadorFK");
                });
#pragma warning restore 612, 618
        }
    }
}
